<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>오선생님의 Script Editor</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .toolbar {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            align-items: center;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .editor-container {
            display: flex;
            height: calc(100vh - 300px);
            min-height: 500px;
        }

        .input-section {
            flex: 1;
            padding: 20px;
            border-right: 1px solid #e9ecef;
        }

        .output-section {
            flex: 1;
            padding: 20px;
            background: #f8f9fa;
        }

        .section-title {
            font-size: 1.3em;
            margin-bottom: 15px;
            color: #495057;
            border-bottom: 2px solid #667eea;
            padding-bottom: 5px;
        }

        .script-input {
            width: 100%;
            height: 80%;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.6;
            resize: none;
            background: white;
            transition: border-color 0.3s ease;
        }

        .script-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .preview-area {
            height: 80%;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            background: white;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.6;
        }

        .translation-pair {
            margin-bottom: 15px;
            padding: 15px;
            border-radius: 5px;
            background: #f8f9fa;
            border-left: 4px solid #667eea;
        }

        .english-text {
            font-weight: bold;
            color: #495057;
            margin-bottom: 5px;
            cursor: pointer;
            user-select: none;
        }

        .korean-text {
            color: #6c757d;
            font-style: italic;
            margin-bottom: 8px;
        }

        .comment-section {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #dee2e6;
        }

        .comment-label {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .comment-input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 0.9em;
            resize: vertical;
            min-height: 60px;
            background: white;
            transition: border-color 0.3s ease;
        }

        .comment-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
        }

        .comment-input::placeholder {
            color: #adb5bd;
        }

        .crossed-out {
            text-decoration: line-through;
            color: #dc3545;
            background-color: #f8d7da;
        }

        .highlighted {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 3px;
            padding: 2px 4px;
        }

        .export-area {
            margin-top: 15px;
            padding: 15px;
            background: #e9ecef;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            max-height: 200px;
            overflow-y: auto;
            white-space: pre-wrap;
        }

        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 15px;
            font-size: 0.9em;
        }

        .stat-item {
            background: white;
            padding: 10px 15px;
            border-radius: 5px;
            border: 1px solid #e9ecef;
        }

        .stat-number {
            font-weight: bold;
            color: #667eea;
        }

        @media (max-width: 768px) {
            .editor-container {
                flex-direction: column;
                height: auto;
            }
            
            .input-section {
                border-right: none;
                border-bottom: 1px solid #e9ecef;
            }
            
            .toolbar {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>오선생님의 Script Editor</h1>
            <p>Fun 강의를 위한 툴~!</p>
        </div>

        <div class="toolbar">
            <button class="btn btn-primary" onclick="parseScript()">Parse Script</button>
            <button class="btn btn-secondary" onclick="clearAll()">Clear All</button>
            <button class="btn btn-success" onclick="exportMarkdown()">Export Markdown</button>
            <button class="btn btn-warning" onclick="copyToClipboard()">Copy to Clipboard</button>
        </div>

        <div class="editor-container">
            <div class="input-section">
                <h3 class="section-title">Input Script</h3>
                <div class="stats">
                    <div class="stat-item">
                        <span class="stat-number" id="totalPairs">0</span>
                        <span>Total Pairs</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number" id="crossedOut">0</span>
                        <span>Crossed Out</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number" id="highlighted">0</span>
                        <span>Highlighted</span>
                    </div>
                </div>
                <textarea class="script-input" id="scriptInput" placeholder="Paste your translation script here...

Example format:
Could you take this off, please?이거 빼주실 수 있나요?
Could you take this off the bill, please?이거 계산에서 빼주실 수 있나요?
I picked up the wrong item. could you take this off the bill, please?제가 잘못 골랐는데요, 이거 계산에서 빼주실 수 있을까요?"></textarea>
            </div>

            <div class="output-section">
                <h3 class="section-title">Editor Preview</h3>
                <div class="preview-area" id="previewArea">
                    <p style="text-align: center; color: #6c757d; margin-top: 50px;">
                        Enter your script and click "Parse Script" to start editing
                    </p>
                </div>
                
                <div class="export-area" id="exportArea" style="display: none;">
                    <strong>Markdown Export:</strong><br>
                    <div id="markdownOutput"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let translationPairs = [];
        let pairStates = {}; // Track crossed out and highlighted states
        let pairComments = {}; // Track comments for each pair

        function parseScript() {
            const input = document.getElementById('scriptInput').value.trim();
            if (!input) {
                alert('Please enter some text to parse!');
                return;
            }

            translationPairs = [];
            pairStates = {};
            pairComments = {};
            
            // Split by lines and filter out empty lines
            const lines = input.split('\n').filter(line => line.trim());
            
            let currentPair = null;
            
            for (let line of lines) {
                line = line.trim();
                
                // Skip lines that start with special characters (like 이번에는 마트편입니다^^)
                if (line.startsWith('이번에는') || line.startsWith('**') || line.length === 0) {
                    continue;
                }
                
                // Check if line contains Korean characters
                const hasKorean = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/.test(line);
                
                if (hasKorean) {
                    // This line contains both English and Korean
                    // Try to split at the first Korean character
                    const match = line.match(/^([^가-힣]*?)([가-힣].*?)$/);
                    if (match) {
                        const english = match[1].trim();
                        const korean = match[2].trim();
                        
                        if (english && korean) {
                            const id = Date.now() + Math.random();
                            translationPairs.push({
                                id: id,
                                english: english,
                                korean: korean
                            });
                            pairStates[id] = { crossedOut: false, highlighted: false };
                            pairComments[id] = '';
                        }
                    }
                }
            }

            renderPreview();
            updateStats();
        }

        function renderPreview() {
            const previewArea = document.getElementById('previewArea');
            
            if (translationPairs.length === 0) {
                previewArea.innerHTML = '<p style="text-align: center; color: #6c757d; margin-top: 50px;">No translation pairs found. Please check your input format.</p>';
                return;
            }

            previewArea.innerHTML = '';
            
            translationPairs.forEach(pair => {
                const pairDiv = document.createElement('div');
                pairDiv.className = 'translation-pair';
                
                const englishDiv = document.createElement('div');
                englishDiv.className = 'english-text';
                englishDiv.textContent = pair.english;
                englishDiv.onclick = () => toggleState(pair.id);
                
                // Apply states
                if (pairStates[pair.id].crossedOut) {
                    englishDiv.classList.add('crossed-out');
                }
                if (pairStates[pair.id].highlighted) {
                    englishDiv.classList.add('highlighted');
                }
                
                const koreanDiv = document.createElement('div');
                koreanDiv.className = 'korean-text';
                koreanDiv.textContent = pair.korean;
                
                // Add comment section
                const commentSection = document.createElement('div');
                commentSection.className = 'comment-section';
                
                const commentLabel = document.createElement('div');
                commentLabel.className = 'comment-label';
                commentLabel.textContent = 'Comment:';
                
                const commentInput = document.createElement('textarea');
                commentInput.className = 'comment-input';
                commentInput.placeholder = 'Add your comment here...';
                commentInput.value = pairComments[pair.id] || '';
                commentInput.oninput = (e) => {
                    pairComments[pair.id] = e.target.value;
                };
                
                commentSection.appendChild(commentLabel);
                commentSection.appendChild(commentInput);
                
                pairDiv.appendChild(englishDiv);
                pairDiv.appendChild(koreanDiv);
                pairDiv.appendChild(commentSection);
                previewArea.appendChild(pairDiv);
            });
        }

        function toggleState(pairId) {
            const state = pairStates[pairId];
            
            if (!state.crossedOut && !state.highlighted) {
                // First click: highlight
                state.highlighted = true;
            } else if (state.highlighted && !state.crossedOut) {
                // Second click: cross out (remove highlight)
                state.highlighted = false;
                state.crossedOut = true;
            } else if (state.crossedOut && !state.highlighted) {
                // Third click: reset
                state.crossedOut = false;
            }
            
            renderPreview();
            updateStats();
        }

        function updateStats() {
            const total = translationPairs.length;
            const crossed = Object.values(pairStates).filter(state => state.crossedOut).length;
            const highlighted = Object.values(pairStates).filter(state => state.highlighted).length;
            
            document.getElementById('totalPairs').textContent = total;
            document.getElementById('crossedOut').textContent = crossed;
            document.getElementById('highlighted').textContent = highlighted;
        }

        function exportMarkdown() {
            if (translationPairs.length === 0) {
                alert('Please parse some text first!');
                return;
            }

            let markdown = '| English | Korean | Comment | Status |\n';
            markdown += '|---------|--------|---------|--------|\n';
            
            translationPairs.forEach(pair => {
                const state = pairStates[pair.id];
                const comment = pairComments[pair.id] || '';
                let status = 'Normal';
                let englishText = pair.english;
                
                if (state.crossedOut) {
                    status = '~~Crossed Out~~';
                    englishText = `~~${pair.english}~~`;
                } else if (state.highlighted) {
                    status = '**Highlighted**';
                    englishText = `**${pair.english}**`;
                }
                
                // Escape pipe characters in content to prevent markdown table breaking
                const escapedEnglish = englishText.replace(/\|/g, '\\|');
                const escapedKorean = pair.korean.replace(/\|/g, '\\|');
                const escapedComment = comment.replace(/\|/g, '\\|').replace(/\n/g, '<br>');
                
                markdown += `| ${escapedEnglish} | ${escapedKorean} | ${escapedComment} | ${status} |\n`;
            });
            
            document.getElementById('markdownOutput').textContent = markdown;
            document.getElementById('exportArea').style.display = 'block';
        }

        function copyToClipboard() {
            const markdownOutput = document.getElementById('markdownOutput').textContent;
            if (!markdownOutput) {
                alert('Please export markdown first!');
                return;
            }
            
            navigator.clipboard.writeText(markdownOutput).then(() => {
                alert('Markdown copied to clipboard!');
            }).catch(err => {
                alert('Failed to copy to clipboard. Please copy manually.');
            });
        }

        function clearAll() {
            if (confirm('Are you sure you want to clear all data?')) {
                document.getElementById('scriptInput').value = '';
                translationPairs = [];
                pairStates = {};
                pairComments = {};
                renderPreview();
                updateStats();
                document.getElementById('exportArea').style.display = 'none';
            }
        }

        // Initialize with your sample data
        document.addEventListener('DOMContentLoaded', function() {
            const sampleData = `english,korean.`;
            
            document.getElementById('scriptInput').value = sampleData;
        });
    </script>
</body>
</html>
